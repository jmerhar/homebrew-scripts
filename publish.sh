#!/bin/bash

# A script to create or update a Homebrew formula file.
# It lives in the root of the 'homebrew-scripts' repository and
# takes the relative path of the script to be published (e.g., 'utility/unlock-pdf.sh')
# as its single argument.

# --- Configuration ---
# The parent directory containing both repositories.
PARENT_DIR="$( cd "$(dirname "$0")/.." >/dev/null 2>&1 ; pwd -P )"
# Your GitHub username and the name of your scripts repository.
GITHUB_USER="jmerhar"
SCRIPTS_REPO="scripts"
# The name of your Homebrew tap repository.
HOMEBREW_TAP_REPO="homebrew-scripts"

# --- Script Logic ---

# Check if a script path was provided as an argument.
if [ -z "$1" ]; then
  echo "Usage: $0 <path-to-script-in-repo>"
  echo "Example: $0 utility/unlock-pdf.sh"
  exit 1
fi

# The relative path to the script within the 'scripts' repository.
SCRIPT_PATH="$1"

# Extract the base name to use for the formula file and command.
# This version is more robust and handles any file extension.
# For 'utility/unlock-pdf.sh', this will be 'unlock-pdf'.
# For 'system/install-dependency', this will be 'install-dependency'.
FORMULA_NAME=$(basename "${SCRIPT_PATH}")
FORMULA_NAME=${FORMULA_NAME%.*}

FORMULA_FILE="${FORMULA_NAME}.rb"
API_URL="https://api.github.com/repos/${GITHUB_USER}/${SCRIPTS_REPO}/releases/latest"

echo "Fetching latest release information for '${FORMULA_NAME}' from GitHub..."

# Fetch the latest release information using the GitHub API.
RELEASE_INFO=$(curl -s "${API_URL}")

# Check if the curl request was successful.
if [ $? -ne 0 ]; then
  echo "Error: Failed to fetch release information. Check your internet connection."
  exit 1
fi

# Extract the tarball URL and version from the JSON response.
TARBALL_URL=$(echo "${RELEASE_INFO}" | grep -oP '"tarball_url": "\K[^"]+')
VERSION=$(echo "${RELEASE_INFO}" | grep -oP '"tag_name": "\K[^"]+')

if [ -z "${TARBALL_URL}" ] || [ -z "${VERSION}" ]; then
  echo "Error: Could not find a release for the scripts repository. Please create a release on GitHub first."
  exit 1
fi

echo "Found latest release: ${VERSION}"
echo "Downloading tarball to calculate SHA256 checksum..."

# Download the tarball and compute the SHA256 checksum.
SHA256_CHECKSUM=$(curl -sSL "${TARBALL_URL}" | shasum -a 256 | awk '{print $1}')

if [ -z "${SHA256_CHECKSUM}" ]; then
  echo "Error: Failed to calculate checksum. Check if the tarball URL is valid."
  exit 1
fi

echo "Checksum calculated: ${SHA256_CHECKSUM}"

echo "Creating or updating formula file at 'Formula/${FORMULA_FILE}'..."

# The class name is converted from the formula name (e.g., 'unlock-pdf' -> 'UnlockPdf').
CLASS_NAME=$(echo "${FORMULA_NAME}" | sed -E 's/(^|-)(.)/\U\2/g')

# Generate the complete formula file content.
cat <<EOF > "${PARENT_DIR}/${HOMEBREW_TAP_REPO}/Formula/${FORMULA_FILE}"
# This file was generated by the publish.sh script.
class ${CLASS_NAME} < Formula
  desc "A brief description of the ${FORMULA_NAME} script"
  homepage "https://github.com/${GITHUB_USER}/${SCRIPTS_REPO}"
  url "${TARBALL_URL}"
  sha256 "${SHA256_CHECKSUM}"

  # IMPORTANT: If this script has a dependency, you must add it here manually.
  # For example: depends_on "install-dependency"

  def install
    # This line installs the script into Homebrew's binary directory.
    # The script is installed from its relative path in the tarball.
    bin.install "${SCRIPT_PATH}" => "${FORMULA_NAME}"
  end
end
EOF

echo "Formula file 'Formula/${FORMULA_FILE}' has been updated successfully."
echo "Remember to commit and push the changes to your homebrew-scripts repository."
